<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration debug="false" scanPeriod="5000">
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <!--value=“logs” – 表示保存项目的目录下-->
    <!--value=“/logs” – 表示保存到系统目录 ，windows系统下 不能写成D:\logs，D:/logs这样才行-->
    <!--value=“…/logs” – 表示保存到项目的父目录-->
    <property resource="application.properties"/>
    <springProperty scope="context" name="LOG_HOME" source="logging.path"/>
    <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} %green([%thread]) %highlight(%-5level) %cyan(%logger{50}) : [%file:%line] %msg %n"/>

    <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} : [%file:%line] %msg %n"/>

    <!--<property name="LOG_HOME" value="{log.path}" />-->
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
    </appender>
    <!-- 按照时间，大小生成日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--SizeAndTimeBasedRollingPolicy滚动类按照大小和日期两个规则生成-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- daily rollover ，每分钟生成一份日志文件-->
            <fileNamePattern>${LOG_HOME}/console.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--保存30天-->
            <MaxHistory>30</MaxHistory>
            <!--超过指定的大小就新建一个日志文件-->
            <maxFileSize>1GB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>
                ${LOG_PATTERN}
            </pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
    </appender>
    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </root>

</configuration>
